#进制转换
def conv(n, base):
    tempList = ''
    digit = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']
    while n> 0:
        temp = digit[n% base]
        tempList+= str(temp)
        n/= base
    tempList = tempList[::-1]
    return tempList
print conv(417, 16)

#判断括号有效
def parValid(aStr):
    tempStr = ''
    for i in aStr:
        if i == '(' or i == '[' or i == '{':
            tempStr += i
        elif tempStr != '':
            if i== ')' and tempStr[-1] == '(':
                tempStr = tempStr[:-1]
            if i== ']' and tempStr[-1] == '[':
                tempStr = tempStr[:-1]
            if i== '}' and tempStr[-1] == '{':
                tempStr = tempStr[:-1]
        else:
            return False
    return tempStr == ''
a = '({})([])'
print parValid(a)
#将中缀表达式变为逆波兰表达式


def priCom(a, b):
    priMat = [\
#/*  +    -    *    /    ^    !    (    )    #	*/ 横轴为当前运算符，纵轴为栈顶运算符#
    ['>', '>', '<', '<', '<', '<', '<', '>', '>'],\
    ['>', '>', '<', '<', '<', '<', '<', '>', '>',],\
    ['>', '>', '>', '>', '<', '<', '<', '>', '>',],\
    ['>', '>', '>', '>', '<', '<', '<', '>', '>',],\
    ['>', '>', '>', '>', '>', '<', '<', '>', '>',],\
    ['>', '>', '>', '>', '>', '>', ' ', '>', '>',],\
    ['<', '<', '<', '<', '<', '<', '<', '=', ' ',],\
    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',],\
    ['<', '<', '<', '<', '<', '<', '<', ' ', '='],\
    ]
    tempDict = {'+':0, '-':1, '*':2, '/':3, '^':4, '!':5, '(':6, ')':7, '#':8}
    return priMat[tempDict[a]][tempDict[b]]
#print priCom('+', '*')
def cal2(a, op, b):
    if op == '+':
        return float(a) + float(b)
    elif op == '-':
        return float(a) - float(b)
    elif op == '*':
        return float(a) * float(b)
    elif op == '/':
        if 0 == b:
            return 0
        else:
            return float(a) / float(b)
    elif op == '^':
        return float(a)**float(b)
        
fab = lambda x: x*fab(x-1) if x > 1 else 1



def convertToRPN(aList):
    #opnd = []#操作数栈
    rpnd = []#RPN
    opcd = []#操作符栈
    opcd.append('#')
    
    while(opcd != []):
        i = 0
        while i < len(aList):
            if aList[i].isdigit():
                #opnd.append(aList[i])
                rpnd.append(aList[i])
                i += 1
            else:
                pri = priCom(opcd[-1], aList[i])
                if  pri == '<':
                    opcd.append(aList[i])
                    i += 1
                elif pri == '=':
                    opcd.pop()
                    i += 1
                elif pri == '>':
                    opc = opcd.pop()
                    rpnd.append(opc)
        for j in opcd[-1:0:-1]:
            rpnd.append(j)
        break
    return rpnd
#a = ['3', '-', '4', '!', '+', '5']
a = ['(', '1', '+', '2', ')', '*', '(', '2', '-', '1', ')']
print convertToRPN(a) 



#计算逆波兰表达式值
def calRPN(aList):
    opnd = []#操作数栈
    for i in aList:
        if i.isdigit():
            opnd.append(i)
        else:
            if '!'== i:
                opn1 = opnd.pop()
                opnd.append(fab(float(opn1)))
            else:
                opn2 = opnd.pop()
                opn3 = opnd.pop()
                opnd.append(cal2(opn3, i, opn2))                    
    return opnd                        
a = ['1', '2', '+', '2', '1', '-', '*']                         
print calRPN(a)                          
    
    
    
